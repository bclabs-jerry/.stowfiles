#!/bin/sh

# utils
function timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

function virtualenv_info {
    [ $VIRTUAL_ENV ] && echo "%{\$fg[white]%}[$(basename $VIRTUAL_ENV)]%{$reset_color%}";
}


function fif() {
  if [ ! "$#" -gt 0 ]; then echo "patterns"; return 1; fi
  rg --files-with-matches --no-messages $2 "$1" | fzf\
  --border\
  --height 80%\
  --extended\
  --ansi\
  --reverse\
  --cycle\
  --header 'Find in File'\
  --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'\
  --bind 'alt-p:preview-up,alt-n:preview-down'\
  --bind 'ctrl-u:half-page-up,ctrl-d:half-page-down'\
  --bind '?:toggle-preview,alt-w:toggle-preview-wrap'\
  --bind 'alt-v:execute(nvim {} >/dev/tty </dev/tty)'\
  --preview "bat --theme='OneHalfDark' --style=numbers --color=always {} | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

# init functions
# conda
function init_conda(){
    __conda_setup="$('$HOME/opt/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "$HOME/opt/anaconda3/etc/profile.d/conda.sh" ]; then
            . "$HOME/opt/anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="$HOME/opt/anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
}

# rbenv
function init_rbenv(){
    export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
    export PATH="$HOME/.rbenv/bin:$PATH"
    export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
    eval "$(rbenv init -)" #changed this to below because of slow startup
}

# jenv
function init_jenv(){
    # export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home
    export PATH=${PATH}:$JAVA_HOME/bin
    export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"
}

# virtualenv
function init_virtualenv(){
    ## virtualEnv Wrapper
    export WORKON_HOME=~/.virtualenvs
    export VIRTUALENVWRAPPER_PYTHON=$(which python3)
    export VIRTUALENVWRAPPER_VIRTUALENV=$(which virtualenv)
    source /usr/local/bin/virtualenvwrapper.sh
}

# gvm
function init_gvm(){
    [[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
}

# nvm 
function init_nvm(){
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
}

# yvm
function init_yvm(){
    export YVM_DIR=$HOME/.yvm
    [ -r $YVM_DIR/yvm.sh ] && . $YVM_DIR/yvm.sh
}

# sdkman
function init_sdkman(){
    #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
    export SDKMAN_DIR="$HOME/.sdkman"
    [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
}

function run_tmux_on_cases(){
    GOGOSING=$(ps -p $(ps -p $$ -o ppid=) -o args=)
    if [[ $CUR_OS == 'linux' ]] && [[ $GOGOSING =~ 'tilda' ]]; then
        if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
            tmux new-session -A -s tilda
        else
            return
        fi
    elif [[ $CUR_OS == 'mac' ]] && [[ $GOGOSING =~ 'alacritty' ]]; then
        if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
            tmux new-session -A -s alacritty
        else
            return
        fi
    fi
}

function set_cur_os() {
    GOGOSING=$(uname -a)

    if [[ $GOGOSING =~ 'Darwin' ]]; then
        export CUR_OS='mac'
    elif [[ $GOGOSING =~ 'WSL' ]]; then
        export CUR_OS='wsl'
    elif [[ $GOGOSING =~ 'Linux' ]]; then
        export CUR_OS='linux'
    fi

    unset GOGOSING
}

function bojlogin() {
    touch $HOME/_jry/algorithms/boj-token
    echo "$1" > ~/_jry/algorithms/boj-token
}

########## favorites
set_cur_os
# run_tmux_on_cases
# init_sdkman

